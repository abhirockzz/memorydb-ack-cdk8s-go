// users_memorydbservicesk8saws
package users_memorydbservicesk8saws

import (
	_init_ "example.com/memorydb-cdk8s/imports/users_memorydbservicesk8saws/jsii"
	_jsii_ "github.com/aws/jsii-runtime-go/runtime"

	"example.com/memorydb-cdk8s/imports/users_memorydbservicesk8saws/internal"
	"github.com/aws/constructs-go/constructs/v10"
	"github.com/cdk8s-team/cdk8s-core-go/cdk8s/v2"
)

// User is the Schema for the Users API.
type User interface {
	cdk8s.ApiObject
	// The group portion of the API version (e.g. `authorization.k8s.io`).
	ApiGroup() *string
	// The object's API version (e.g. `authorization.k8s.io/v1`).
	ApiVersion() *string
	// The chart in which this object is defined.
	Chart() cdk8s.Chart
	// The object kind.
	Kind() *string
	// Metadata associated with this API object.
	Metadata() cdk8s.ApiObjectMetadataDefinition
	// The name of the API object.
	//
	// If a name is specified in `metadata.name` this will be the name returned.
	// Otherwise, a name will be generated by calling
	// `Chart.of(this).generatedObjectName(this)`, which by default uses the
	// construct path to generate a DNS-compatible name for the resource.
	Name() *string
	// The tree node.
	Node() constructs.Node
	// Create a dependency between this ApiObject and other constructs.
	//
	// These can be other ApiObjects, Charts, or custom.
	AddDependency(dependencies ...constructs.IConstruct)
	// Applies a set of RFC-6902 JSON-Patch operations to the manifest synthesized for this API object.
	//
	// Example:
	//     kubePod.addJsonPatch(JsonPatch.replace('/spec/enableServiceLinks', true));
	//
	AddJsonPatch(ops ...cdk8s.JsonPatch)
	// Renders the object to Kubernetes JSON.
	ToJson() interface{}
	// Returns a string representation of this construct.
	ToString() *string
}

// The jsii proxy struct for User
type jsiiProxy_User struct {
	internal.Type__cdk8sApiObject
}

func (j *jsiiProxy_User) ApiGroup() *string {
	var returns *string
	_jsii_.Get(
		j,
		"apiGroup",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_User) ApiVersion() *string {
	var returns *string
	_jsii_.Get(
		j,
		"apiVersion",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_User) Chart() cdk8s.Chart {
	var returns cdk8s.Chart
	_jsii_.Get(
		j,
		"chart",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_User) Kind() *string {
	var returns *string
	_jsii_.Get(
		j,
		"kind",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_User) Metadata() cdk8s.ApiObjectMetadataDefinition {
	var returns cdk8s.ApiObjectMetadataDefinition
	_jsii_.Get(
		j,
		"metadata",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_User) Name() *string {
	var returns *string
	_jsii_.Get(
		j,
		"name",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_User) Node() constructs.Node {
	var returns constructs.Node
	_jsii_.Get(
		j,
		"node",
		&returns,
	)
	return returns
}


// Defines a "User" API object.
func NewUser(scope constructs.Construct, id *string, props *UserProps) User {
	_init_.Initialize()

	j := jsiiProxy_User{}

	_jsii_.Create(
		"users_memorydbservicesk8saws.User",
		[]interface{}{scope, id, props},
		&j,
	)

	return &j
}

// Defines a "User" API object.
func NewUser_Override(u User, scope constructs.Construct, id *string, props *UserProps) {
	_init_.Initialize()

	_jsii_.Create(
		"users_memorydbservicesk8saws.User",
		[]interface{}{scope, id, props},
		u,
	)
}

// Checks if `x` is a construct.
//
// Use this method instead of `instanceof` to properly detect `Construct`
// instances, even when the construct library is symlinked.
//
// Explanation: in JavaScript, multiple copies of the `constructs` library on
// disk are seen as independent, completely different libraries. As a
// consequence, the class `Construct` in each copy of the `constructs` library
// is seen as a different class, and an instance of one class will not test as
// `instanceof` the other class. `npm install` will not create installations
// like this, but users may manually symlink construct libraries together or
// use a monorepo tool: in those cases, multiple copies of the `constructs`
// library can be accidentally installed, and `instanceof` will behave
// unpredictably. It is safest to avoid using `instanceof`, and using
// this type-testing method instead.
//
// Returns: true if `x` is an object created from a class which extends `Construct`.
func User_IsConstruct(x interface{}) *bool {
	_init_.Initialize()

	var returns *bool

	_jsii_.StaticInvoke(
		"users_memorydbservicesk8saws.User",
		"isConstruct",
		[]interface{}{x},
		&returns,
	)

	return returns
}

// Renders a Kubernetes manifest for "User".
//
// This can be used to inline resource manifests inside other objects (e.g. as templates).
func User_Manifest(props *UserProps) interface{} {
	_init_.Initialize()

	var returns interface{}

	_jsii_.StaticInvoke(
		"users_memorydbservicesk8saws.User",
		"manifest",
		[]interface{}{props},
		&returns,
	)

	return returns
}

// Returns the `ApiObject` named `Resource` which is a child of the given construct.
//
// If `c` is an `ApiObject`, it is returned directly. Throws an
// exception if the construct does not have a child named `Default` _or_ if
// this child is not an `ApiObject`.
func User_Of(c constructs.IConstruct) cdk8s.ApiObject {
	_init_.Initialize()

	var returns cdk8s.ApiObject

	_jsii_.StaticInvoke(
		"users_memorydbservicesk8saws.User",
		"of",
		[]interface{}{c},
		&returns,
	)

	return returns
}

func User_GVK() *cdk8s.GroupVersionKind {
	_init_.Initialize()
	var returns *cdk8s.GroupVersionKind
	_jsii_.StaticGet(
		"users_memorydbservicesk8saws.User",
		"GVK",
		&returns,
	)
	return returns
}

func (u *jsiiProxy_User) AddDependency(dependencies ...constructs.IConstruct) {
	args := []interface{}{}
	for _, a := range dependencies {
		args = append(args, a)
	}

	_jsii_.InvokeVoid(
		u,
		"addDependency",
		args,
	)
}

func (u *jsiiProxy_User) AddJsonPatch(ops ...cdk8s.JsonPatch) {
	args := []interface{}{}
	for _, a := range ops {
		args = append(args, a)
	}

	_jsii_.InvokeVoid(
		u,
		"addJsonPatch",
		args,
	)
}

func (u *jsiiProxy_User) ToJson() interface{} {
	var returns interface{}

	_jsii_.Invoke(
		u,
		"toJson",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (u *jsiiProxy_User) ToString() *string {
	var returns *string

	_jsii_.Invoke(
		u,
		"toString",
		nil, // no parameters
		&returns,
	)

	return returns
}

// User is the Schema for the Users API.
type UserProps struct {
	Metadata *cdk8s.ApiObjectMetadata `field:"optional" json:"metadata" yaml:"metadata"`
	// UserSpec defines the desired state of User.
	//
	// You create users and assign them specific permissions by using an access string. You assign the users to Access Control Lists aligned with a specific role (administrators, human resources) that are then deployed to one or more MemoryDB clusters.
	Spec *UserSpec `field:"optional" json:"spec" yaml:"spec"`
}

// UserSpec defines the desired state of User.
//
// You create users and assign them specific permissions by using an access string. You assign the users to Access Control Lists aligned with a specific role (administrators, human resources) that are then deployed to one or more MemoryDB clusters.
type UserSpec struct {
	// Access permissions string used for this user.
	AccessString *string `field:"required" json:"accessString" yaml:"accessString"`
	// Denotes the user's authentication properties, such as whether it requires a password to authenticate.
	AuthenticationMode *UserSpecAuthenticationMode `field:"required" json:"authenticationMode" yaml:"authenticationMode"`
	// The name of the user.
	//
	// This value must be unique as it also serves as the user identifier.
	Name *string `field:"required" json:"name" yaml:"name"`
	// A list of tags to be added to this resource.
	//
	// A tag is a key-value pair. A tag key must be accompanied by a tag value, although null is accepted.
	Tags *[]*UserSpecTags `field:"optional" json:"tags" yaml:"tags"`
}

// Denotes the user's authentication properties, such as whether it requires a password to authenticate.
type UserSpecAuthenticationMode struct {
	Passwords *[]*UserSpecAuthenticationModePasswords `field:"optional" json:"passwords" yaml:"passwords"`
	Type *string `field:"optional" json:"type" yaml:"type"`
}

// SecretKeyReference combines a k8s corev1.SecretReference with a specific key within the referred-to Secret.
type UserSpecAuthenticationModePasswords struct {
	// Key is the key within the secret.
	Key *string `field:"required" json:"key" yaml:"key"`
	// Name is unique within a namespace to reference a secret resource.
	Name *string `field:"optional" json:"name" yaml:"name"`
	// Namespace defines the space within which the secret name must be unique.
	Namespace *string `field:"optional" json:"namespace" yaml:"namespace"`
}

// A tag that can be added to an MemoryDB resource.
//
// Tags are composed of a Key/Value pair. You can use tags to categorize and track all your MemoryDB resources. When you add or remove tags on clusters, those actions will be replicated to all nodes in the cluster. A tag with a null Value is permitted. For more information, see Tagging your MemoryDB resources (https://docs.aws.amazon.com/MemoryDB/latest/devguide/tagging-resources.html)
type UserSpecTags struct {
	Key *string `field:"optional" json:"key" yaml:"key"`
	Value *string `field:"optional" json:"value" yaml:"value"`
}

